/**
 * @fileoverview gRPC-Web generated client stub for messages
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.20.3
// source: src/proto/message.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as src_proto_message_pb from '../../src/proto/message_pb';


export class MessageServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorsendMessage = new grpcWeb.MethodDescriptor(
    '/messages.MessageService/sendMessage',
    grpcWeb.MethodType.UNARY,
    src_proto_message_pb.Message,
    src_proto_message_pb.Message,
    (request: src_proto_message_pb.Message) => {
      return request.serializeBinary();
    },
    src_proto_message_pb.Message.deserializeBinary
  );

  sendMessage(
    request: src_proto_message_pb.Message,
    metadata: grpcWeb.Metadata | null): Promise<src_proto_message_pb.Message>;

  sendMessage(
    request: src_proto_message_pb.Message,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: src_proto_message_pb.Message) => void): grpcWeb.ClientReadableStream<src_proto_message_pb.Message>;

  sendMessage(
    request: src_proto_message_pb.Message,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: src_proto_message_pb.Message) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/messages.MessageService/sendMessage',
        request,
        metadata || {},
        this.methodDescriptorsendMessage,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/messages.MessageService/sendMessage',
    request,
    metadata || {},
    this.methodDescriptorsendMessage);
  }

  methodDescriptorgetMessagesByUser = new grpcWeb.MethodDescriptor(
    '/messages.MessageService/getMessagesByUser',
    grpcWeb.MethodType.UNARY,
    src_proto_message_pb.UserId,
    src_proto_message_pb.MessageList,
    (request: src_proto_message_pb.UserId) => {
      return request.serializeBinary();
    },
    src_proto_message_pb.MessageList.deserializeBinary
  );

  getMessagesByUser(
    request: src_proto_message_pb.UserId,
    metadata: grpcWeb.Metadata | null): Promise<src_proto_message_pb.MessageList>;

  getMessagesByUser(
    request: src_proto_message_pb.UserId,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: src_proto_message_pb.MessageList) => void): grpcWeb.ClientReadableStream<src_proto_message_pb.MessageList>;

  getMessagesByUser(
    request: src_proto_message_pb.UserId,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: src_proto_message_pb.MessageList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/messages.MessageService/getMessagesByUser',
        request,
        metadata || {},
        this.methodDescriptorgetMessagesByUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/messages.MessageService/getMessagesByUser',
    request,
    metadata || {},
    this.methodDescriptorgetMessagesByUser);
  }

  methodDescriptorjoinChat = new grpcWeb.MethodDescriptor(
    '/messages.MessageService/joinChat',
    grpcWeb.MethodType.SERVER_STREAMING,
    src_proto_message_pb.Empty,
    src_proto_message_pb.MessageList,
    (request: src_proto_message_pb.Empty) => {
      return request.serializeBinary();
    },
    src_proto_message_pb.MessageList.deserializeBinary
  );

  joinChat(
    request: src_proto_message_pb.Empty,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<src_proto_message_pb.MessageList> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/messages.MessageService/joinChat',
      request,
      metadata || {},
      this.methodDescriptorjoinChat);
  }

  methodDescriptorleaveChat = new grpcWeb.MethodDescriptor(
    '/messages.MessageService/leaveChat',
    grpcWeb.MethodType.UNARY,
    src_proto_message_pb.Empty,
    src_proto_message_pb.Empty,
    (request: src_proto_message_pb.Empty) => {
      return request.serializeBinary();
    },
    src_proto_message_pb.Empty.deserializeBinary
  );

  leaveChat(
    request: src_proto_message_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<src_proto_message_pb.Empty>;

  leaveChat(
    request: src_proto_message_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: src_proto_message_pb.Empty) => void): grpcWeb.ClientReadableStream<src_proto_message_pb.Empty>;

  leaveChat(
    request: src_proto_message_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: src_proto_message_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/messages.MessageService/leaveChat',
        request,
        metadata || {},
        this.methodDescriptorleaveChat,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/messages.MessageService/leaveChat',
    request,
    metadata || {},
    this.methodDescriptorleaveChat);
  }

}

