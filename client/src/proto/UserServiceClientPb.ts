/**
 * @fileoverview gRPC-Web generated client stub for userpackage
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.20.3
// source: src/proto/user.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as src_proto_user_pb from '../../src/proto/user_pb';


export class UserServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorgetUser = new grpcWeb.MethodDescriptor(
    '/userpackage.UserService/getUser',
    grpcWeb.MethodType.UNARY,
    src_proto_user_pb.UserId,
    src_proto_user_pb.User,
    (request: src_proto_user_pb.UserId) => {
      return request.serializeBinary();
    },
    src_proto_user_pb.User.deserializeBinary
  );

  getUser(
    request: src_proto_user_pb.UserId,
    metadata: grpcWeb.Metadata | null): Promise<src_proto_user_pb.User>;

  getUser(
    request: src_proto_user_pb.UserId,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: src_proto_user_pb.User) => void): grpcWeb.ClientReadableStream<src_proto_user_pb.User>;

  getUser(
    request: src_proto_user_pb.UserId,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: src_proto_user_pb.User) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/userpackage.UserService/getUser',
        request,
        metadata || {},
        this.methodDescriptorgetUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/userpackage.UserService/getUser',
    request,
    metadata || {},
    this.methodDescriptorgetUser);
  }

  methodDescriptorchangeUser = new grpcWeb.MethodDescriptor(
    '/userpackage.UserService/changeUser',
    grpcWeb.MethodType.UNARY,
    src_proto_user_pb.User,
    src_proto_user_pb.User,
    (request: src_proto_user_pb.User) => {
      return request.serializeBinary();
    },
    src_proto_user_pb.User.deserializeBinary
  );

  changeUser(
    request: src_proto_user_pb.User,
    metadata: grpcWeb.Metadata | null): Promise<src_proto_user_pb.User>;

  changeUser(
    request: src_proto_user_pb.User,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: src_proto_user_pb.User) => void): grpcWeb.ClientReadableStream<src_proto_user_pb.User>;

  changeUser(
    request: src_proto_user_pb.User,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: src_proto_user_pb.User) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/userpackage.UserService/changeUser',
        request,
        metadata || {},
        this.methodDescriptorchangeUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/userpackage.UserService/changeUser',
    request,
    metadata || {},
    this.methodDescriptorchangeUser);
  }

  methodDescriptoraddFriend = new grpcWeb.MethodDescriptor(
    '/userpackage.UserService/addFriend',
    grpcWeb.MethodType.UNARY,
    src_proto_user_pb.FriendId,
    src_proto_user_pb.Message,
    (request: src_proto_user_pb.FriendId) => {
      return request.serializeBinary();
    },
    src_proto_user_pb.Message.deserializeBinary
  );

  addFriend(
    request: src_proto_user_pb.FriendId,
    metadata: grpcWeb.Metadata | null): Promise<src_proto_user_pb.Message>;

  addFriend(
    request: src_proto_user_pb.FriendId,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: src_proto_user_pb.Message) => void): grpcWeb.ClientReadableStream<src_proto_user_pb.Message>;

  addFriend(
    request: src_proto_user_pb.FriendId,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: src_proto_user_pb.Message) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/userpackage.UserService/addFriend',
        request,
        metadata || {},
        this.methodDescriptoraddFriend,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/userpackage.UserService/addFriend',
    request,
    metadata || {},
    this.methodDescriptoraddFriend);
  }

  methodDescriptorgetFriends = new grpcWeb.MethodDescriptor(
    '/userpackage.UserService/getFriends',
    grpcWeb.MethodType.UNARY,
    src_proto_user_pb.UserId,
    src_proto_user_pb.FriendList,
    (request: src_proto_user_pb.UserId) => {
      return request.serializeBinary();
    },
    src_proto_user_pb.FriendList.deserializeBinary
  );

  getFriends(
    request: src_proto_user_pb.UserId,
    metadata: grpcWeb.Metadata | null): Promise<src_proto_user_pb.FriendList>;

  getFriends(
    request: src_proto_user_pb.UserId,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: src_proto_user_pb.FriendList) => void): grpcWeb.ClientReadableStream<src_proto_user_pb.FriendList>;

  getFriends(
    request: src_proto_user_pb.UserId,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: src_proto_user_pb.FriendList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/userpackage.UserService/getFriends',
        request,
        metadata || {},
        this.methodDescriptorgetFriends,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/userpackage.UserService/getFriends',
    request,
    metadata || {},
    this.methodDescriptorgetFriends);
  }

  methodDescriptoruploadAvatar = new grpcWeb.MethodDescriptor(
    '/userpackage.UserService/uploadAvatar',
    grpcWeb.MethodType.UNARY,
    src_proto_user_pb.AvatarUpload,
    src_proto_user_pb.User,
    (request: src_proto_user_pb.AvatarUpload) => {
      return request.serializeBinary();
    },
    src_proto_user_pb.User.deserializeBinary
  );

  uploadAvatar(
    request: src_proto_user_pb.AvatarUpload,
    metadata: grpcWeb.Metadata | null): Promise<src_proto_user_pb.User>;

  uploadAvatar(
    request: src_proto_user_pb.AvatarUpload,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: src_proto_user_pb.User) => void): grpcWeb.ClientReadableStream<src_proto_user_pb.User>;

  uploadAvatar(
    request: src_proto_user_pb.AvatarUpload,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: src_proto_user_pb.User) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/userpackage.UserService/uploadAvatar',
        request,
        metadata || {},
        this.methodDescriptoruploadAvatar,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/userpackage.UserService/uploadAvatar',
    request,
    metadata || {},
    this.methodDescriptoruploadAvatar);
  }

}

